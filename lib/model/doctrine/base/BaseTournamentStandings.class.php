<?php

/**
 * BaseTournamentStandings
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $team_id
 * @property integer $tournament_id
 * @property integer $tournament_phase_strip_id
 * @property float $rank
 * @property integer $defeats
 * @property integer $draws
 * @property integer $wins
 * @property float $points
 * @property integer $score_for
 * @property integer $score_against
 * @property integer $score_difference
 * @property integer $games
 * @property integer $variation
 * @property float $rate
 * @property string $display_order
 * @property Team $Team
 * @property Tournament $Tournament
 * @property TournamentPhaseStrip $TournamentPhaseStrip
 * 
 * @method integer              getTeamId()                    Returns the current record's "team_id" value
 * @method integer              getTournamentId()              Returns the current record's "tournament_id" value
 * @method integer              getTournamentPhaseStripId()    Returns the current record's "tournament_phase_strip_id" value
 * @method float                getRank()                      Returns the current record's "rank" value
 * @method integer              getDefeats()                   Returns the current record's "defeats" value
 * @method integer              getDraws()                     Returns the current record's "draws" value
 * @method integer              getWins()                      Returns the current record's "wins" value
 * @method float                getPoints()                    Returns the current record's "points" value
 * @method integer              getScoreFor()                  Returns the current record's "score_for" value
 * @method integer              getScoreAgainst()              Returns the current record's "score_against" value
 * @method integer              getScoreDifference()           Returns the current record's "score_difference" value
 * @method integer              getGames()                     Returns the current record's "games" value
 * @method integer              getVariation()                 Returns the current record's "variation" value
 * @method float                getRate()                      Returns the current record's "rate" value
 * @method string               getDisplayOrder()              Returns the current record's "display_order" value
 * @method Team                 getTeam()                      Returns the current record's "Team" value
 * @method Tournament           getTournament()                Returns the current record's "Tournament" value
 * @method TournamentPhaseStrip getTournamentPhaseStrip()      Returns the current record's "TournamentPhaseStrip" value
 * @method TournamentStandings  setTeamId()                    Sets the current record's "team_id" value
 * @method TournamentStandings  setTournamentId()              Sets the current record's "tournament_id" value
 * @method TournamentStandings  setTournamentPhaseStripId()    Sets the current record's "tournament_phase_strip_id" value
 * @method TournamentStandings  setRank()                      Sets the current record's "rank" value
 * @method TournamentStandings  setDefeats()                   Sets the current record's "defeats" value
 * @method TournamentStandings  setDraws()                     Sets the current record's "draws" value
 * @method TournamentStandings  setWins()                      Sets the current record's "wins" value
 * @method TournamentStandings  setPoints()                    Sets the current record's "points" value
 * @method TournamentStandings  setScoreFor()                  Sets the current record's "score_for" value
 * @method TournamentStandings  setScoreAgainst()              Sets the current record's "score_against" value
 * @method TournamentStandings  setScoreDifference()           Sets the current record's "score_difference" value
 * @method TournamentStandings  setGames()                     Sets the current record's "games" value
 * @method TournamentStandings  setVariation()                 Sets the current record's "variation" value
 * @method TournamentStandings  setRate()                      Sets the current record's "rate" value
 * @method TournamentStandings  setDisplayOrder()              Sets the current record's "display_order" value
 * @method TournamentStandings  setTeam()                      Sets the current record's "Team" value
 * @method TournamentStandings  setTournament()                Sets the current record's "Tournament" value
 * @method TournamentStandings  setTournamentPhaseStrip()      Sets the current record's "TournamentPhaseStrip" value
 * 
 * @package    futebol
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTournamentStandings extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tournament_standings');
        $this->hasColumn('team_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             ));
        $this->hasColumn('tournament_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             ));
        $this->hasColumn('tournament_phase_strip_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             ));
        $this->hasColumn('rank', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('defeats', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('draws', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('wins', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('points', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('score_for', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('score_against', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('score_difference', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('games', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('variation', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('rate', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('display_order', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Team', array(
             'local' => 'team_id',
             'foreign' => 'id'));

        $this->hasOne('Tournament', array(
             'local' => 'tournament_id',
             'foreign' => 'id'));

        $this->hasOne('TournamentPhaseStrip', array(
             'local' => 'tournament_phase_strip_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}