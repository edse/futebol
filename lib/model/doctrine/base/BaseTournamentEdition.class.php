<?php

/**
 * BaseTournamentEdition
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $tournament_edition_ext_id
 * @property integer $tournament_id
 * @property string $name
 * @property string $description
 * @property text $rules
 * @property string $location
 * @property timestamp $date_start
 * @property timestamp $date_end
 * @property Tournament $Tournament
 * @property Doctrine_Collection $Games
 * 
 * @method integer             getTournamentEditionExtId()    Returns the current record's "tournament_edition_ext_id" value
 * @method integer             getTournamentId()              Returns the current record's "tournament_id" value
 * @method string              getName()                      Returns the current record's "name" value
 * @method string              getDescription()               Returns the current record's "description" value
 * @method text                getRules()                     Returns the current record's "rules" value
 * @method string              getLocation()                  Returns the current record's "location" value
 * @method timestamp           getDateStart()                 Returns the current record's "date_start" value
 * @method timestamp           getDateEnd()                   Returns the current record's "date_end" value
 * @method Tournament          getTournament()                Returns the current record's "Tournament" value
 * @method Doctrine_Collection getGames()                     Returns the current record's "Games" collection
 * @method TournamentEdition   setTournamentEditionExtId()    Sets the current record's "tournament_edition_ext_id" value
 * @method TournamentEdition   setTournamentId()              Sets the current record's "tournament_id" value
 * @method TournamentEdition   setName()                      Sets the current record's "name" value
 * @method TournamentEdition   setDescription()               Sets the current record's "description" value
 * @method TournamentEdition   setRules()                     Sets the current record's "rules" value
 * @method TournamentEdition   setLocation()                  Sets the current record's "location" value
 * @method TournamentEdition   setDateStart()                 Sets the current record's "date_start" value
 * @method TournamentEdition   setDateEnd()                   Sets the current record's "date_end" value
 * @method TournamentEdition   setTournament()                Sets the current record's "Tournament" value
 * @method TournamentEdition   setGames()                     Sets the current record's "Games" collection
 * 
 * @package    futebol
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTournamentEdition extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tournament_edition');
        $this->hasColumn('tournament_edition_ext_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('tournament_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('rules', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('location', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('date_start', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('date_end', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Tournament', array(
             'local' => 'tournament_id',
             'foreign' => 'id'));

        $this->hasMany('Game as Games', array(
             'local' => 'id',
             'foreign' => 'tournament_edition_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable();
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}